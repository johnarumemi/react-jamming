{"version":3,"sources":["components/react_SearchBar/SearchBar.jsx","components/react_Track/Track.jsx","components/react_TrackList/TrackList.jsx","components/react_SearchResults/SearchResults.jsx","components/react_Playlist/Playlist.jsx","api/Spotify/Spotify.js","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","searchTerm","setSearchTerm","className","type","placeholder","onChange","target","value","onClick","onSearch","Track","name","artist","album","handleClick","isRemoval","TrackList","tracks","map","track","id","defaultProps","SearchResults","searchResults","onAdd","Playlist","event","preventDefault","onNameChange","playlistName","playlistTracks","onRemove","onSave","Spotify","authorization_endpoint","process","redirect_url","scope","_users_access_token","hash_params","expires_at","clearAccessToken","this","access_token","getRequestUrl","clientId","replace","getHashFragment","window","location","hash","parseHash","pattern","RegExp","hashFragment","console","debug","Array","from","matchAll","reduce","obj","match","groups","key","Object","defineProperty","writable","enumerable","configurable","format","moment","HTML5_FMT","DATETIME_LOCAL_SECONDS","expires_in","Number","add","update_token_data","data","setTimeout","getAccessToken","isHashParamsAvailable","history","pushState","assign","log","replaceState","search","base_url","accessToken","options","method","headers","Authorization","fetch","response","ok","json","jsonResponse","items","item","trim","artists","uri","Error","statusText","error","Promise","reject","message","_getUserId","user_id","_createPlaylist","post_data","public","collaborative","description","body","JSON","stringify","playlist_id","savePlaylist","trackURis","uris","snapshot_id","App","setSearchResults","setPlaylistName","setPlaylistTracks","useEffect","loadAccessToken","addEventListener","removeEventListener","data-testid","aria-level","then","every","playlistTrack","prev","newPlaylist","filter","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d55a8962.chunk.js","sourcesContent":["import React, { useState} from \"react\";\r\nimport './SearchBar.scss'\r\n\r\n\r\nexport function SearchBar(props){\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleTermChange = ({target}) => {\r\n        setSearchTerm(target.value)\r\n    }\r\n\r\n    const handleSearch = () => {\r\n        props.onSearch(searchTerm)\r\n    }\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input type='text'\r\n                   placeholder=\"Enter A Song, Album, or Artist\"\r\n                   onChange={handleTermChange}\r\n                   value={searchTerm}\r\n            />\r\n            <button\r\n                className=\"SearchButton\"\r\n                onClick={handleSearch}\r\n            >\r\n                SEARCH\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Track.scss'\r\n\r\nexport function Track(props){\r\n\r\n    return (\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{props.name}</h3>\r\n                <p>{props.artist} | {props.album }</p>\r\n            </div>\r\n            <button\r\n                className=\"Track-action\"\r\n                onClick={props.handleClick}\r\n            >\r\n                {props.isRemoval? '-' : '+'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './TrackList.scss'\r\nimport {Track} from \"../react_Track/Track\";\r\n\r\nexport function TrackList(props){\r\n\r\n    const getTracks = () => props.tracks.map( track => (\r\n        <Track\r\n            key={track.id}\r\n            name={track.name}\r\n            artist={track.artist}\r\n            album={track.album}\r\n            isRemoval={props.isRemoval}\r\n            handleClick={() => props.onClick(track)}\r\n        />\r\n        ));\r\n\r\n    return (\r\n        <div className=\"TrackList\">\r\n            {getTracks()}\r\n        </div>\r\n    );\r\n}\r\n\r\nTrackList.defaultProps = {\r\n    tracks: []\r\n}","import React from 'react';\r\nimport {TrackList} from \"../react_TrackList/TrackList\";\r\nimport './SearchResults.scss'\r\n\r\n\r\nexport function SearchResults(props){\r\n    return (\r\n        <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList\r\n                tracks={props.searchResults}\r\n                onClick={props.onAdd}\r\n                isRemoval={false}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {TrackList} from \"../react_TrackList/TrackList\";\r\nimport './Playlist.scss';\r\n\r\n\r\n\r\nexport function Playlist(props){\r\n\r\n    const handleNameChange = (event) => {\r\n        event.preventDefault()\r\n        props.onNameChange(event.target.value)\r\n    }\r\n    return (\r\n        <div className=\"Playlist\">\r\n            <input onChange={handleNameChange} value={props.playlistName} />\r\n            {/* -- Add a TrackList component -- */}\r\n            <TrackList\r\n                tracks={props.playlistTracks}\r\n                isRemoval={true}\r\n                onClick={props.onRemove}\r\n            />\r\n            <button\r\n                className=\"Playlist-save\"\r\n                onClick={props.onSave}\r\n            >\r\n                SAVE TO SPOTIFY\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import moment from \"moment\";\r\n\r\n\r\nconst Spotify = {\r\n\r\n    authorization_endpoint: process.env.REACT_APP_SPOTIFY_AUTHORIZE_ENDPOINT,\r\n    redirect_url: process.env.REACT_APP_SPOTIFY_REDIRECT_URL,\r\n    scope: process.env.REACT_APP_SPOTIFY_SCOPE,\r\n    _users_access_token: '',\r\n    hash_params: {},\r\n    expires_at: '',\r\n\r\n    clearAccessToken(){\r\n      this.access_token = '';\r\n      this.expires_at = '';\r\n      this.hash_params = {};\r\n    },\r\n\r\n    getRequestUrl(){\r\n        return `https://accounts.spotify.com/authorize?client_id=${this.clientId}&response_type=token&scope=${this.scope}&redirect_uri=${this.redirect_url}`\r\n            .replace(/[\\s\\n]/, '');\r\n    },\r\n\r\n    get access_token(){ return this._users_access_token; },\r\n\r\n    set access_token(value){ this._users_access_token = value; },\r\n\r\n    get clientId() { return process.env.REACT_APP_SPOTIFY_CLIENT_ID; },\r\n\r\n    getHashFragment: function(){\r\n        // this can be mocked\r\n        return window.location.hash\r\n    },\r\n\r\n    parseHash: function(){\r\n\r\n        // use regex to extract query params and query values from hash fragment in windows URL\r\n        const pattern = new RegExp(/(?<=[#&])(?<key>[^=&\\s]*)=(?<value>[^=&\\s]*)[&\\s]?/g)\r\n\r\n        const hashFragment = this.getHashFragment();\r\n\r\n        if (!hashFragment){\r\n            console.debug(`\r\n            hash fragment is empty\r\n            ------\r\n            ${hashFragment}\r\n            -----\r\n            Could not parse harsh fragment\r\n            `)\r\n            return null;\r\n        }\r\n\r\n        const matchArray = Array.from(hashFragment.matchAll(pattern))\r\n\r\n        // reduce array of objects with query params and query values into a single Object\r\n        const reducer = (obj, match) => {\r\n\r\n            obj[match.groups.key] = match.groups.value;\r\n\r\n            Object.defineProperty(obj, match.groups.key, {\r\n                value: match.groups.value,\r\n                writable: false,\r\n                enumerable: true,\r\n                configurable: true\r\n            })\r\n\r\n            if (match.groups.key === 'expires_in'){\r\n                // format\r\n                const format = moment.HTML5_FMT.DATETIME_LOCAL_SECONDS;\r\n                const expires_in = Number(match.groups.value);\r\n                const expires_at = moment().add(expires_in, 'seconds').format(format);\r\n\r\n                Object.defineProperty(obj, 'expires_at', {\r\n                    value: expires_at,\r\n                    writable: false,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                })\r\n\r\n            }\r\n            return obj;\r\n        }\r\n\r\n        return matchArray.reduce(reducer, {});\r\n\r\n    },\r\n\r\n    update_token_data(data){\r\n        this.hash_params = data;\r\n        this.access_token = data[\"access_token\"];\r\n        this.expires_at = data['expires_at']\r\n\r\n        const expires_in = data['expires_in']\r\n\r\n        // Clear access token after a given amount of time\r\n        setTimeout( () => {\r\n            this.hash_params = '';\r\n            this.access_token = '';\r\n            this.expires_at = '';\r\n        }, Number(expires_in)*1000 )\r\n    },\r\n\r\n    get isHashParamsAvailable(){\r\n        const hash_params = this.parseHash()\r\n\r\n        if (hash_params && hash_params.access_token && hash_params.expires_in){\r\n            this.hash_params = hash_params\r\n            return true\r\n        }\r\n\r\n        return false\r\n    },\r\n\r\n    getAccessToken: function() {\r\n\r\n        if (this.access_token){\r\n            // token available\r\n            return this.access_token;\r\n        }\r\n\r\n        // token not available check URL for hash\r\n        if (this.isHashParamsAvailable){\r\n\r\n            // Hash in Url and extracted\r\n            this.update_token_data(this.hash_params);\r\n\r\n            // wipe access token and URL parameters\r\n            window.history.pushState(\"Access Token\", null, '/react-jamming');\r\n\r\n            return this.access_token;\r\n\r\n        } else {\r\n            // redirect user to get access token\r\n            window.location.assign(this.getRequestUrl());\r\n\r\n            console.log(\"redirecting user to get access token\");\r\n\r\n            setTimeout(() => {\r\n                window.history.replaceState(\"\", null, '/')\r\n            }, 1000)\r\n        }\r\n    },\r\n\r\n    async search(searchTerm){\r\n        if (!searchTerm) {\r\n            console.debug('empty search term passed in, cancelling search.')\r\n            return;\r\n        }\r\n        // GET requests endpoint\r\n        const base_url = `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`\r\n\r\n        const accessToken = this.getAccessToken();\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n            }\r\n        }\r\n\r\n        let jsonResponse;\r\n        try {\r\n\r\n            const response = await fetch(base_url, options)\r\n\r\n            if (response.ok){\r\n\r\n                jsonResponse = await response.json();\r\n                const data = jsonResponse.tracks.items.map( (item) => {\r\n\r\n                    return {\r\n                        id: item.id,\r\n                        name: item.name.replace(/\\(.*\\)/, '').trim(),\r\n                        artist: item.artists[0].name,  //.map(artist => artist.name).join(', '),\r\n                        album: item.album.name,\r\n                        uri: item.uri\r\n                    };\r\n                });\r\n\r\n                console.debug(data)\r\n                return data;\r\n            }\r\n            throw new Error('failed to retrieve Spotify search data\\n' + response.statusText);\r\n        } catch (err) {\r\n            console.error(err)\r\n            return new Promise.reject(err.message ? err.message: jsonResponse);\r\n        }\r\n    },\r\n\r\n    /*\r\n        Methods for saving Playlist\r\n     */\r\n    async _getUserId(){\r\n\r\n        const access_token = this.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${access_token}` }\r\n        const base_url = `https://api.spotify.com/v1/me`;\r\n\r\n        let jsonResponse;\r\n        try {\r\n            // Get request for user profile data\r\n            const response = await fetch(base_url,\r\n                {\r\n                    method: \"GET\",\r\n                    headers: headers\r\n                })\r\n\r\n            if (response.ok){\r\n                // Response is a user object\r\n                jsonResponse = await response.json();\r\n\r\n                // Get User id from the response object\r\n                const user_id = jsonResponse.id\r\n                if (user_id) console.debug('Successfully retrieved Spotify user_id');\r\n                return  user_id;\r\n            }\r\n            throw new Error('failed to retrieve user id')\r\n        } catch (err) {\r\n            console.error(err)\r\n            return new Promise.reject(err.message? err.message: jsonResponse);\r\n        }\r\n\r\n    },\r\n\r\n    async _createPlaylist(name){\r\n        if (!name) return;\r\n        const user_id = await this._getUserId();\r\n        if (!user_id) return;\r\n\r\n        const access_token = this.getAccessToken();\r\n        const base_url = `https://api.spotify.com/v1/users/${user_id}/playlists`;\r\n        const headers = {\r\n            Authorization: `Bearer ${access_token}`,\r\n            \"Content-Type\": `application/json`\r\n        };\r\n\r\n        const post_data = {\r\n            name: name,\r\n            public: true,\r\n            collaborative: false,\r\n            description: \"Jamming App Playlist\"\r\n        };\r\n\r\n        //  region POST method for creating a Playlist\r\n        let jsonResponse;\r\n        try {\r\n            const response = await fetch(base_url, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(post_data),\r\n                headers: headers\r\n            });\r\n\r\n            if (response.ok){\r\n                // Body of the POST request\r\n                jsonResponse = await response.json();\r\n\r\n                const playlist_id = jsonResponse.id\r\n                if(playlist_id) console.debug(`Successfully created Playlist ${name}`);\r\n                return playlist_id;\r\n            }\r\n            throw new Error('failed to create playlist\\n' + response.statusText);\r\n        } catch (err) {\r\n            console.error(err)\r\n            return new Promise.reject(err.message?err.message: jsonResponse);\r\n        }\r\n        // endregion\r\n    },\r\n\r\n    async savePlaylist(name, trackURis) {\r\n\r\n        if (!name && !trackURis) return;\r\n        const playlist_id = await this._createPlaylist(name)\r\n        if (!playlist_id) return;\r\n\r\n        const access_token = this.getAccessToken();\r\n        const base_url = `https://api.spotify.com/v1/playlists/${playlist_id}/tracks`\r\n        const headers = {\r\n            Authorization: `Bearer ${access_token}`,\r\n            \"Content-Type\": `application/json`\r\n        };\r\n\r\n        const post_data = {\r\n            uris: trackURis,\r\n        };\r\n\r\n        try {\r\n            // Get request for user profile data\r\n            const response = await fetch(base_url, {\r\n                method: 'POST',\r\n                body: JSON.stringify(post_data),\r\n                headers: headers\r\n            })\r\n\r\n            if (response.ok){\r\n                const jsonResponse = await response.json();\r\n\r\n                const snapshot_id = jsonResponse.id;\r\n\r\n                if(snapshot_id) console.debug(`\r\n                Successfully saved tracks to playlist ${name}. \r\n                snapshot id: ${snapshot_id}`);\r\n\r\n                return  snapshot_id;\r\n            }\r\n\r\n            throw new Error('failed to save playlist')\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { Spotify };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { SearchBar } from \"../react_SearchBar/SearchBar\";\r\nimport { SearchResults } from \"../react_SearchResults/SearchResults\";\r\nimport { Playlist } from \"../react_Playlist/Playlist\";\r\n\r\nimport './App.scss';\r\nimport {Spotify} from \"../../api/Spotify/Spotify\";\r\n//\r\n// const fakeSearchResults = [\r\n//     {\r\n//         id: 1,\r\n//         name: \"Tiny Dancer\",\r\n//         artist: \"Elton John\",\r\n//         album: \"Madman Across The Water\"\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         name: \"Tiny Dancer\",\r\n//         artist: \"Tim McGraw\",\r\n//         album: \"Love Story\"\r\n//     }\r\n// ]\r\n\r\nconst fakePlaylist = [\r\n    {\r\n        id: 3,\r\n        name: \"Tiny Dancer\",\r\n        artist: \"Elton John\",\r\n        album: \"Madman Across The Water\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Tiny Dancer\",\r\n        artist: \"Tim McGraw\",\r\n        album: \"Love Story\"\r\n    }\r\n]\r\n\r\nexport function App(){\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [playlistName, setPlaylistName] = useState('New Playlist');\r\n    const [playlistTracks, setPlaylistTracks] = useState([]);\r\n\r\n    const addTrack = (track) => {\r\n\r\n        const add = playlistTracks.every(playlistTrack => playlistTrack.id !== track.id)\r\n        if (add){\r\n            setPlaylistTracks(prev => [...prev, track]);\r\n        };\r\n    };\r\n\r\n    const removeTrack = (track) => {\r\n        const newPlaylist = playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id)\r\n        setPlaylistTracks(newPlaylist)\r\n    };\r\n\r\n    const updatePlaylistName = name => setPlaylistName(name)\r\n\r\n    const savePlaylist = () => {\r\n        const trackURIs = playlistTracks.map(track => track.uri)\r\n        Spotify.savePlaylist(playlistName, trackURIs)\r\n            .then(()=>{\r\n                setPlaylistName('New Playlist');\r\n                setPlaylistTracks([]);\r\n            });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const loadAccessToken = ()=> {Spotify.getAccessToken()}\r\n        window.addEventListener('load', loadAccessToken)\r\n\r\n        return () => {\r\n            window.removeEventListener('load', loadAccessToken)\r\n        }\r\n    }, [])\r\n\r\n    const search = (searchTerm) => {\r\n        //Spotify.clearAccessToken();\r\n        Spotify.search(searchTerm).then( data =>{\r\n            setSearchResults(data)\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div data-testid='app'>\r\n            <h1 aria-level=\"1\">\r\n                Ja<span className=\"highlight\">mm</span>ing\r\n            </h1>\r\n\r\n            <div className=\"App\">\r\n                {/*<!-- SearchBar component -->*/}\r\n                <SearchBar onSearch={search}/>\r\n                <div className=\"App-playlist\">\r\n                    {/*<!-- SearchResults component -->*/}\r\n                    <SearchResults\r\n                        searchResults={searchResults}\r\n                        onAdd={addTrack}\r\n                    />\r\n                    {/*<!-- Playlist component -->*/}\r\n                    <Playlist\r\n                        playlistName={playlistName}\r\n                        onNameChange={updatePlaylistName}\r\n                        playlistTracks={playlistTracks}\r\n                        onRemove={removeTrack}\r\n                        onSave={savePlaylist}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div>);\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\n// Components\nimport { App } from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}